{"meta":{"generated_at":"2016-07-10T18:01:14.260Z","location":"Singapore","api_version":"v1","total_events":1},"events":[{"id":"231834225","name":"July of Haskell","description":"For the July of Haskell we have Manuel and Moritz giving us talks. \n\n\n- Playgrounds are not just for learning - by Manuel M T Chakravarty - How Haskell might be relevant to recent happenings in the ethereum world - Meng from Legalese \n\nAbstract for Manuel's Talk: The invention of the read-eval-print loop (REPL) went hand-in-hand with that of functional programming as part of Lisp programming environments. Modern functional programming has added much since these early days. However, the REPL has remained mostly unchanged, despite being far from perfect. In the case of Haskell, a factor strongly contributing to this stagnation is the toolchain’s failure to make the leap from purely command line-based to modern graphical development environments.  In this talk, I will discuss playgrounds, the natural next step in the evolution of the REPL. Playgrounds turn the REPL history into a text buffer that becomes part of the program code. They also provide a live programming environment, where changes in both the main program and playground code are immediately reflected in playground results. This leads to a fast feedback cycle, which makes for an ideal learning environment.  However, just like the REPL, playgrounds are not just for learners. They facilitate experimentation and an iterative test-driven development workflow beyond the capabilities of the REPL. For example, the playground associated with a Haskell module may contain QuickCheck properties that are constantly checked while the Haskell code is being developed and refactored. Moreover, playgrounds support structured and graphical evaluation results, such as HTML documents, charts, and animations. Just like text, these media types are immediately available for inspection and change as the program is being edited. Haskell for Mac is a novel integrated and interactive development environment for Haskell that is designed around playgrounds. I will demonstrate the use of playgrounds in Haskell for Mac, to illustrate that playgrounds improve Haskell development for both beginners and experts alike.  About Legalese's Talk: The presentation would be on the recent weakness of the dao and the imperative nature of solidity. we'd run through vitalik's list of known bug cases, then show how our DSL does for modal what FP does for lambda, then show how simple expressions compile to english and also to ethereum. We'd also share a few papers about how automated theorem proving, formal verification, and model checking are different but related ideas. We'd end with inviting anyone who is interested to work with us on this research and maybe participate in the funding from the three sources of grants Legalese is intending to apply for   About Speakers: Manuel M T Chakravarty is an Associate Professor at the University of New South Wales. His core research interests are functional programming, novel compiler technology, and high-performance computing. He graduated from the University of Karlsruhe and received a doctoral degree from the Berlin Institute of Technology. His major contributions include work on Haskell’s foreign function interface, the C-&gt;Haskell binding generator, the theory and implementation of type families in the Glasgow Haskell Compiler, and the development of multiple systems for data parallel programming of multicore CPUs and GPUs, including Accelerate, Data Parallel Haskell, and Repa. He is the principal author of the interactive development environment Haskell for Mac and he is excited by the opportunities presented by the Swift programming language. Most importantly, he believes in the fruitful combination of theory and practice. \n\n\n\n\n\nLegalese is trying to replace lawyers with software. Our tech stack rests on a domain-specific language optimized for expressing obligations, permissions, and prohibitions. We call this haskell-based DSL, L4. We write a compiler for L4. The compiler is able to compile statements written in L4 into English-language contracts. The compiler’s static analyzer can automatically detect conflicts within and between contracts. We write “reference libraries” of “programs” in L4, which turn into investment agreements, shareholders agreements, directors’ resolutions, members’ resolutions, ESOP contracts, and so on. We augment the compiler to output to Ethereum, thus providing the world’s first formally verified programs to run on the blockchain – a feature valuable in the financial world. We extend the compiler to output other natural language, to provide multi-lingual contracts – a feature valuable for cross-border transactions. We write a scenario visualizer so you can see what a contract means and does, not just what it says. We write a runtime monitor that evaluates contract traces and business events for conformance and, in the case of breach, blame assignment.","location":"Hackerspace.SG, 344B King George's Ave, King George's Building, Singapore","rsvp_count":29,"url":"http://www.meetup.com/HASKELL-SG/events/231834225/","group_id":11260962,"group_name":"HASKELL.SG","group_url":"http://meetup.com/HASKELL-SG","formatted_time":"11 Jul 2016, Mon, 7:30 pm","start_time":"2016-07-11T11:30:00.000Z","end_time":"2016-07-11T13:30:00.000Z","platform":"meetup","latitude":1.31041,"longitude":103.862358}]}